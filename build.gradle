buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id 'jacoco'
    id 'java-library'
    id 'org.cadixdev.licenser' version '0.6.1'

    id 'signing'
    id 'maven-publish'
    id 'io.github.gradle-nexus.publish-plugin' version '1.0.0'
}

repositories {
    mavenLocal()
    mavenCentral()
}

group 'ru.oleg-cherednik.gson'
version '2.1'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

configurations {
    jar.archiveFileName = "${rootProject.name}-${version}.jar"
}

dependencies {
    api "com.google.code.gson:gson:${property('gson.version')}"
    api "org.springframework.boot:spring-boot-autoconfigure:${property('spring-boot.version')}"
    api "org.springframework.boot:spring-boot-starter-web:${property('spring-boot.version')}"

    implementation "ru.oleg-cherednik.gson:gson-utils:${property('gson-utils.version')}"

    testImplementation('org.testng:testng:7.3.0') {
        exclude group: 'junit', module: 'junit'
    }

    testImplementation "org.springframework.boot:spring-boot-autoconfigure:${property('spring-boot.version')}"
    testImplementation "com.google.code.gson:gson:${property('gson.version')}"

    testImplementation("org.springframework.boot:spring-boot-starter-web:${property('spring-boot.version')}") {
//        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-json'
    }

    testImplementation "org.springframework.boot:spring-boot-starter-jdbc:${property('spring-boot.version')}"
    testImplementation "com.h2database:h2:1.4.200"

    testImplementation("org.springframework.boot:spring-boot-starter-test:${property('spring-boot.version')}") {
        exclude group: 'org.junit.jupiter', module: 'junit-jupiter'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'org.mockito', module: 'mockito-junit-jupiter'
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

check.dependsOn jacocoTestReport

test {
    useTestNG()
}

license {
    header rootProject.file('APACHE.txt')
    include '**/*.java'
    newLine false
}

signing {
    sign configurations.archives
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)

            pom {
                name = rootProject.name

//                description = "\n" +
//                        "    Gson usability utilities.\n" +
//                        "    It's designed to add additional features like easy and centralized configuration,\n" +
//                        "    builder or static method set.\n" +
//                        "  "

                url = 'https://github.com/oleg-cherednik/gson-spring'
                inceptionYear = '2021'

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'oleg.cherednik'
                        name = 'Oleg Cherednik'
                        email = 'oleg.cherednik@gmail.com'
                    }
                }

                scm {
                    url = 'https://github.com/oleg-cherednik/gson-spring'
                    connection = 'scm:https://github.com/oleg-cherednik/gson-spring.git'
                    developerConnection = 'scm:git@github.com:oleg-cherednik/gson-spring.git'
                }
            }
        }
    }

    repositories {
        mavenLocal()
    }
}

nexusPublishing {
    repositories {
        sonatype()
    }
}
